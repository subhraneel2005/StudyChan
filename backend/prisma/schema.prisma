datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id               String               @id @default(cuid())
    email            String               @unique
    username         String               @unique
    password         String
    documents        Document[]
    chats            Chat[]
    subscriptionPlan SubscriptionPlan     @default(FREE)
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
}

model Document {
    id                   String               @id @default(cuid())
    fileName             String @unique
    publicUrl            String
    originalName         String
    PineconeData         PineconeVectorData?  @relation(fields: [pineconeVectorDataId], references: [id])
    user                 User                 @relation(fields: [userId], references: [id])
    chats                Chat[]
    userId               String
    parsedText           String
    chunks               DocumentChunk[]
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt
    pineconeVectorDataId String?              @unique
}

model PineconeVectorData {
    id           String    @id @default(cuid())
    document     Document?
    documentId   String
    totalVectors Int
}

model DocumentChunk {
    id         String   @id @default(cuid())
    document   Document @relation(fields: [documentId], references: [id])
    documentId String
    content    String
    embedding  Json?
    pineconeId String?
    index      Int
    keywords   String[]
}

model Chat {
    id         String    @id @default(cuid())
    user       User      @relation(fields: [userId], references: [id])
    userId     String
    document   Document? @relation(fields: [documentId], references: [fileName])
    documentId String?   // Initially null, updated when the user sends the first message
    messages   Message[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model Message {
    id        String   @id @default(cuid())
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
    content   String
    role      String   // 'user' or 'assistant'
    createdAt DateTime @default(now())
}

enum SubscriptionPlan {
    FREE
    BASIC
    PRO
    ENTERPRISE
}

